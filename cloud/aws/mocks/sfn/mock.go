// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/cloud/aws/ifaces/sfniface (interfaces: SFNAPI)

// Package mock_sfniface is a generated GoMock package.
package mock_sfniface

import (
	context "context"
	reflect "reflect"

	sfn "github.com/aws/aws-sdk-go-v2/service/sfn"
	gomock "github.com/golang/mock/gomock"
)

// MockSFNAPI is a mock of SFNAPI interface.
type MockSFNAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSFNAPIMockRecorder
}

// MockSFNAPIMockRecorder is the mock recorder for MockSFNAPI.
type MockSFNAPIMockRecorder struct {
	mock *MockSFNAPI
}

// NewMockSFNAPI creates a new mock instance.
func NewMockSFNAPI(ctrl *gomock.Controller) *MockSFNAPI {
	mock := &MockSFNAPI{ctrl: ctrl}
	mock.recorder = &MockSFNAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSFNAPI) EXPECT() *MockSFNAPIMockRecorder {
	return m.recorder
}

// StartExecution mocks base method.
func (m *MockSFNAPI) StartExecution(arg0 context.Context, arg1 *sfn.StartExecutionInput, arg2 ...func(*sfn.Options)) (*sfn.StartExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartExecution", varargs...)
	ret0, _ := ret[0].(*sfn.StartExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecution indicates an expected call of StartExecution.
func (mr *MockSFNAPIMockRecorder) StartExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecution", reflect.TypeOf((*MockSFNAPI)(nil).StartExecution), varargs...)
}
