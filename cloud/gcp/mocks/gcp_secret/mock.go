// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/cloud/gcp/ifaces/gcloud_secret (interfaces: SecretManagerClient,SecretIterator)

// Package mock_gcloud_secret is a generated GoMock package.
package mock_gcloud_secret

import (
	context "context"
	reflect "reflect"

	secretmanagerpb "cloud.google.com/go/secretmanager/apiv1/secretmanagerpb"
	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
	ifaces_gcloud_secret "github.com/nitrictech/nitric/cloud/gcp/ifaces/gcloud_secret"
)

// MockSecretManagerClient is a mock of SecretManagerClient interface.
type MockSecretManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretManagerClientMockRecorder
}

// MockSecretManagerClientMockRecorder is the mock recorder for MockSecretManagerClient.
type MockSecretManagerClientMockRecorder struct {
	mock *MockSecretManagerClient
}

// NewMockSecretManagerClient creates a new mock instance.
func NewMockSecretManagerClient(ctrl *gomock.Controller) *MockSecretManagerClient {
	mock := &MockSecretManagerClient{ctrl: ctrl}
	mock.recorder = &MockSecretManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretManagerClient) EXPECT() *MockSecretManagerClientMockRecorder {
	return m.recorder
}

// AccessSecretVersion mocks base method.
func (m *MockSecretManagerClient) AccessSecretVersion(arg0 context.Context, arg1 *secretmanagerpb.AccessSecretVersionRequest, arg2 ...gax.CallOption) (*secretmanagerpb.AccessSecretVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccessSecretVersion", varargs...)
	ret0, _ := ret[0].(*secretmanagerpb.AccessSecretVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessSecretVersion indicates an expected call of AccessSecretVersion.
func (mr *MockSecretManagerClientMockRecorder) AccessSecretVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessSecretVersion", reflect.TypeOf((*MockSecretManagerClient)(nil).AccessSecretVersion), varargs...)
}

// AddSecretVersion mocks base method.
func (m *MockSecretManagerClient) AddSecretVersion(arg0 context.Context, arg1 *secretmanagerpb.AddSecretVersionRequest, arg2 ...gax.CallOption) (*secretmanagerpb.SecretVersion, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSecretVersion", varargs...)
	ret0, _ := ret[0].(*secretmanagerpb.SecretVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecretVersion indicates an expected call of AddSecretVersion.
func (mr *MockSecretManagerClientMockRecorder) AddSecretVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretVersion", reflect.TypeOf((*MockSecretManagerClient)(nil).AddSecretVersion), varargs...)
}

// ListSecrets mocks base method.
func (m *MockSecretManagerClient) ListSecrets(arg0 context.Context, arg1 *secretmanagerpb.ListSecretsRequest, arg2 ...gax.CallOption) ifaces_gcloud_secret.SecretIterator {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecrets", varargs...)
	ret0, _ := ret[0].(ifaces_gcloud_secret.SecretIterator)
	return ret0
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretManagerClientMockRecorder) ListSecrets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretManagerClient)(nil).ListSecrets), varargs...)
}

// UpdateSecret mocks base method.
func (m *MockSecretManagerClient) UpdateSecret(arg0 context.Context, arg1 *secretmanagerpb.UpdateSecretRequest, arg2 ...gax.CallOption) (*secretmanagerpb.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecret", varargs...)
	ret0, _ := ret[0].(*secretmanagerpb.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockSecretManagerClientMockRecorder) UpdateSecret(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockSecretManagerClient)(nil).UpdateSecret), varargs...)
}

// MockSecretIterator is a mock of SecretIterator interface.
type MockSecretIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSecretIteratorMockRecorder
}

// MockSecretIteratorMockRecorder is the mock recorder for MockSecretIterator.
type MockSecretIteratorMockRecorder struct {
	mock *MockSecretIterator
}

// NewMockSecretIterator creates a new mock instance.
func NewMockSecretIterator(ctrl *gomock.Controller) *MockSecretIterator {
	mock := &MockSecretIterator{ctrl: ctrl}
	mock.recorder = &MockSecretIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretIterator) EXPECT() *MockSecretIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockSecretIterator) Next() (*secretmanagerpb.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*secretmanagerpb.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockSecretIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSecretIterator)(nil).Next))
}
