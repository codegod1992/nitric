// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/provider/aws/ifaces/snsiface (interfaces: SNSAPI)

// Package mock_snsiface is a generated GoMock package.
package mock_snsiface

import (
	context "context"
	reflect "reflect"

	sns "github.com/aws/aws-sdk-go-v2/service/sns"
	gomock "github.com/golang/mock/gomock"
)

// MockSNSAPI is a mock of SNSAPI interface.
type MockSNSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSNSAPIMockRecorder
}

// MockSNSAPIMockRecorder is the mock recorder for MockSNSAPI.
type MockSNSAPIMockRecorder struct {
	mock *MockSNSAPI
}

// NewMockSNSAPI creates a new mock instance.
func NewMockSNSAPI(ctrl *gomock.Controller) *MockSNSAPI {
	mock := &MockSNSAPI{ctrl: ctrl}
	mock.recorder = &MockSNSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSNSAPI) EXPECT() *MockSNSAPIMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockSNSAPI) Publish(arg0 context.Context, arg1 *sns.PublishInput, arg2 ...func(*sns.Options)) (*sns.PublishOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*sns.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockSNSAPIMockRecorder) Publish(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockSNSAPI)(nil).Publish), varargs...)
}
