// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/pkg/plugins/secret/secret_manager (interfaces: SecretManagerClient)

// Package mock_secret_manager is a generated GoMock package.
package mock_secret_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
	secretmanager "google.golang.org/genproto/googleapis/cloud/secretmanager/v1"
)

// MockSecretManagerClient is a mock of SecretManagerClient interface.
type MockSecretManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretManagerClientMockRecorder
}

// MockSecretManagerClientMockRecorder is the mock recorder for MockSecretManagerClient.
type MockSecretManagerClientMockRecorder struct {
	mock *MockSecretManagerClient
}

// NewMockSecretManagerClient creates a new mock instance.
func NewMockSecretManagerClient(ctrl *gomock.Controller) *MockSecretManagerClient {
	mock := &MockSecretManagerClient{ctrl: ctrl}
	mock.recorder = &MockSecretManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretManagerClient) EXPECT() *MockSecretManagerClientMockRecorder {
	return m.recorder
}

// AccessSecretVersion mocks base method.
func (m *MockSecretManagerClient) AccessSecretVersion(arg0 context.Context, arg1 *secretmanager.AccessSecretVersionRequest, arg2 ...gax.CallOption) (*secretmanager.AccessSecretVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccessSecretVersion", varargs...)
	ret0, _ := ret[0].(*secretmanager.AccessSecretVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessSecretVersion indicates an expected call of AccessSecretVersion.
func (mr *MockSecretManagerClientMockRecorder) AccessSecretVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessSecretVersion", reflect.TypeOf((*MockSecretManagerClient)(nil).AccessSecretVersion), varargs...)
}

// AddSecretVersion mocks base method.
func (m *MockSecretManagerClient) AddSecretVersion(arg0 context.Context, arg1 *secretmanager.AddSecretVersionRequest, arg2 ...gax.CallOption) (*secretmanager.SecretVersion, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSecretVersion", varargs...)
	ret0, _ := ret[0].(*secretmanager.SecretVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecretVersion indicates an expected call of AddSecretVersion.
func (mr *MockSecretManagerClientMockRecorder) AddSecretVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretVersion", reflect.TypeOf((*MockSecretManagerClient)(nil).AddSecretVersion), varargs...)
}

// CreateSecret mocks base method.
func (m *MockSecretManagerClient) CreateSecret(arg0 context.Context, arg1 *secretmanager.CreateSecretRequest, arg2 ...gax.CallOption) (*secretmanager.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecret", varargs...)
	ret0, _ := ret[0].(*secretmanager.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretManagerClientMockRecorder) CreateSecret(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretManagerClient)(nil).CreateSecret), varargs...)
}

// GetSecret mocks base method.
func (m *MockSecretManagerClient) GetSecret(arg0 context.Context, arg1 *secretmanager.GetSecretRequest, arg2 ...gax.CallOption) (*secretmanager.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecret", varargs...)
	ret0, _ := ret[0].(*secretmanager.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretManagerClientMockRecorder) GetSecret(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretManagerClient)(nil).GetSecret), varargs...)
}

// UpdateSecret mocks base method.
func (m *MockSecretManagerClient) UpdateSecret(arg0 context.Context, arg1 *secretmanager.UpdateSecretRequest, arg2 ...gax.CallOption) (*secretmanager.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecret", varargs...)
	ret0, _ := ret[0].(*secretmanager.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockSecretManagerClientMockRecorder) UpdateSecret(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockSecretManagerClient)(nil).UpdateSecret), varargs...)
}
