// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/pkg/plugins/queue (interfaces: QueueService)

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	queue "github.com/nitrictech/nitric/pkg/plugins/queue"
)

// MockQueueService is a mock of QueueService interface.
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService.
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance.
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// Complete mocks base method.
func (m *MockQueueService) Complete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockQueueServiceMockRecorder) Complete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockQueueService)(nil).Complete), arg0, arg1, arg2)
}

// Receive mocks base method.
func (m *MockQueueService) Receive(arg0 context.Context, arg1 queue.ReceiveOptions) ([]queue.NitricTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0, arg1)
	ret0, _ := ret[0].([]queue.NitricTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockQueueServiceMockRecorder) Receive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockQueueService)(nil).Receive), arg0, arg1)
}

// Send mocks base method.
func (m *MockQueueService) Send(arg0 context.Context, arg1 string, arg2 queue.NitricTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockQueueServiceMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockQueueService)(nil).Send), arg0, arg1, arg2)
}

// SendBatch mocks base method.
func (m *MockQueueService) SendBatch(arg0 context.Context, arg1 string, arg2 []queue.NitricTask) (*queue.SendBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(*queue.SendBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockQueueServiceMockRecorder) SendBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockQueueService)(nil).SendBatch), arg0, arg1, arg2)
}
