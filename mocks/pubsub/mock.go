// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/pkg/ifaces/pubsub (interfaces: PubsubClient)

// Package mock_pubsub is a generated GoMock package.
package mock_pubsub

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ifaces_pubsub "github.com/nitrictech/nitric/pkg/ifaces/pubsub"
)

// MockPubsubClient is a mock of PubsubClient interface.
type MockPubsubClient struct {
	ctrl     *gomock.Controller
	recorder *MockPubsubClientMockRecorder
}

// MockPubsubClientMockRecorder is the mock recorder for MockPubsubClient.
type MockPubsubClientMockRecorder struct {
	mock *MockPubsubClient
}

// NewMockPubsubClient creates a new mock instance.
func NewMockPubsubClient(ctrl *gomock.Controller) *MockPubsubClient {
	mock := &MockPubsubClient{ctrl: ctrl}
	mock.recorder = &MockPubsubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubsubClient) EXPECT() *MockPubsubClientMockRecorder {
	return m.recorder
}

// Topic mocks base method.
func (m *MockPubsubClient) Topic(arg0 string) ifaces_pubsub.Topic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", arg0)
	ret0, _ := ret[0].(ifaces_pubsub.Topic)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockPubsubClientMockRecorder) Topic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockPubsubClient)(nil).Topic), arg0)
}

// Topics mocks base method.
func (m *MockPubsubClient) Topics(arg0 context.Context) ifaces_pubsub.TopicIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics", arg0)
	ret0, _ := ret[0].(ifaces_pubsub.TopicIterator)
	return ret0
}

// Topics indicates an expected call of Topics.
func (mr *MockPubsubClientMockRecorder) Topics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockPubsubClient)(nil).Topics), arg0)
}
