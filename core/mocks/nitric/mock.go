// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/api/nitric/v1 (interfaces: FaasService_TriggerStreamServer)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nitrictech/nitric/core/pkg/api/nitric/v1"
	metadata "google.golang.org/grpc/metadata"
)

// MockFaasService_TriggerStreamServer is a mock of FaasService_TriggerStreamServer interface.
type MockFaasService_TriggerStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockFaasService_TriggerStreamServerMockRecorder
}

// MockFaasService_TriggerStreamServerMockRecorder is the mock recorder for MockFaasService_TriggerStreamServer.
type MockFaasService_TriggerStreamServerMockRecorder struct {
	mock *MockFaasService_TriggerStreamServer
}

// NewMockFaasService_TriggerStreamServer creates a new mock instance.
func NewMockFaasService_TriggerStreamServer(ctrl *gomock.Controller) *MockFaasService_TriggerStreamServer {
	mock := &MockFaasService_TriggerStreamServer{ctrl: ctrl}
	mock.recorder = &MockFaasService_TriggerStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaasService_TriggerStreamServer) EXPECT() *MockFaasService_TriggerStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFaasService_TriggerStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFaasService_TriggerStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFaasService_TriggerStreamServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockFaasService_TriggerStreamServer) Recv() (*v1.ClientMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.ClientMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFaasService_TriggerStreamServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFaasService_TriggerStreamServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockFaasService_TriggerStreamServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFaasService_TriggerStreamServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFaasService_TriggerStreamServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockFaasService_TriggerStreamServer) Send(arg0 *v1.ServerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFaasService_TriggerStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFaasService_TriggerStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFaasService_TriggerStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFaasService_TriggerStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFaasService_TriggerStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockFaasService_TriggerStreamServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFaasService_TriggerStreamServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFaasService_TriggerStreamServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockFaasService_TriggerStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFaasService_TriggerStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFaasService_TriggerStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFaasService_TriggerStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFaasService_TriggerStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFaasService_TriggerStreamServer)(nil).SetTrailer), arg0)
}
