// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/plugins/document (interfaces: DocumentService)

// Package mock_document is a generated GoMock package.
package mock_document

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	document "github.com/nitrictech/nitric/core/pkg/plugins/document"
)

// MockDocumentService is a mock of DocumentService interface.
type MockDocumentService struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentServiceMockRecorder
}

// MockDocumentServiceMockRecorder is the mock recorder for MockDocumentService.
type MockDocumentServiceMockRecorder struct {
	mock *MockDocumentService
}

// NewMockDocumentService creates a new mock instance.
func NewMockDocumentService(ctrl *gomock.Controller) *MockDocumentService {
	mock := &MockDocumentService{ctrl: ctrl}
	mock.recorder = &MockDocumentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentService) EXPECT() *MockDocumentServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDocumentService) Delete(arg0 context.Context, arg1 *document.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDocumentServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDocumentService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockDocumentService) Get(arg0 context.Context, arg1 *document.Key) (*document.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*document.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDocumentServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDocumentService)(nil).Get), arg0, arg1)
}

// Query mocks base method.
func (m *MockDocumentService) Query(arg0 context.Context, arg1 *document.Collection, arg2 []document.QueryExpression, arg3 int, arg4 map[string]string) (*document.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*document.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDocumentServiceMockRecorder) Query(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDocumentService)(nil).Query), arg0, arg1, arg2, arg3, arg4)
}

// QueryStream mocks base method.
func (m *MockDocumentService) QueryStream(arg0 context.Context, arg1 *document.Collection, arg2 []document.QueryExpression, arg3 int) func() (*document.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(func() (*document.Document, error))
	return ret0
}

// QueryStream indicates an expected call of QueryStream.
func (mr *MockDocumentServiceMockRecorder) QueryStream(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStream", reflect.TypeOf((*MockDocumentService)(nil).QueryStream), arg0, arg1, arg2, arg3)
}

// Set mocks base method.
func (m *MockDocumentService) Set(arg0 context.Context, arg1 *document.Key, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockDocumentServiceMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDocumentService)(nil).Set), arg0, arg1, arg2)
}
