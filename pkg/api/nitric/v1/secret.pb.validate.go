// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: secret/v1/secret.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SecretPutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SecretPutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretPutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretPutRequestMultiError, or nil if none found.
func (m *SecretPutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretPutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSecret() == nil {
		err := SecretPutRequestValidationError{
			field:  "Secret",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretPutRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretPutRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretPutRequestValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return SecretPutRequestMultiError(errors)
	}

	return nil
}

// SecretPutRequestMultiError is an error wrapping multiple validation errors
// returned by SecretPutRequest.ValidateAll() if the designated constraints
// aren't met.
type SecretPutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretPutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretPutRequestMultiError) AllErrors() []error { return m }

// SecretPutRequestValidationError is the validation error returned by
// SecretPutRequest.Validate if the designated constraints aren't met.
type SecretPutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretPutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretPutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretPutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretPutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretPutRequestValidationError) ErrorName() string { return "SecretPutRequestValidationError" }

// Error satisfies the builtin error interface
func (e SecretPutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretPutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretPutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretPutRequestValidationError{}

// Validate checks the field values on SecretPutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SecretPutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretPutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretPutResponseMultiError, or nil if none found.
func (m *SecretPutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretPutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecretVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretPutResponseValidationError{
					field:  "SecretVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretPutResponseValidationError{
					field:  "SecretVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretPutResponseValidationError{
				field:  "SecretVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SecretPutResponseMultiError(errors)
	}

	return nil
}

// SecretPutResponseMultiError is an error wrapping multiple validation errors
// returned by SecretPutResponse.ValidateAll() if the designated constraints
// aren't met.
type SecretPutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretPutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretPutResponseMultiError) AllErrors() []error { return m }

// SecretPutResponseValidationError is the validation error returned by
// SecretPutResponse.Validate if the designated constraints aren't met.
type SecretPutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretPutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretPutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretPutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretPutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretPutResponseValidationError) ErrorName() string {
	return "SecretPutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretPutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretPutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretPutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretPutResponseValidationError{}

// Validate checks the field values on SecretAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretAccessRequestMultiError, or nil if none found.
func (m *SecretAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSecretVersion() == nil {
		err := SecretAccessRequestValidationError{
			field:  "SecretVersion",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSecretVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretAccessRequestValidationError{
					field:  "SecretVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretAccessRequestValidationError{
					field:  "SecretVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretAccessRequestValidationError{
				field:  "SecretVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SecretAccessRequestMultiError(errors)
	}

	return nil
}

// SecretAccessRequestMultiError is an error wrapping multiple validation
// errors returned by SecretAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type SecretAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretAccessRequestMultiError) AllErrors() []error { return m }

// SecretAccessRequestValidationError is the validation error returned by
// SecretAccessRequest.Validate if the designated constraints aren't met.
type SecretAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretAccessRequestValidationError) ErrorName() string {
	return "SecretAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SecretAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretAccessRequestValidationError{}

// Validate checks the field values on SecretAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretAccessResponseMultiError, or nil if none found.
func (m *SecretAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSecretVersion() == nil {
		err := SecretAccessResponseValidationError{
			field:  "SecretVersion",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSecretVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretAccessResponseValidationError{
					field:  "SecretVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretAccessResponseValidationError{
					field:  "SecretVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretAccessResponseValidationError{
				field:  "SecretVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetValue()) > 24000 {
		err := SecretAccessResponseValidationError{
			field:  "Value",
			reason: "value length must be at most 24000 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SecretAccessResponseMultiError(errors)
	}

	return nil
}

// SecretAccessResponseMultiError is an error wrapping multiple validation
// errors returned by SecretAccessResponse.ValidateAll() if the designated
// constraints aren't met.
type SecretAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretAccessResponseMultiError) AllErrors() []error { return m }

// SecretAccessResponseValidationError is the validation error returned by
// SecretAccessResponse.Validate if the designated constraints aren't met.
type SecretAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretAccessResponseValidationError) ErrorName() string {
	return "SecretAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretAccessResponseValidationError{}

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SecretMultiError, or nil if none found.
func (m *Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) > 256 {
		err := SecretValidationError{
			field:  "Name",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Secret_Name_Pattern.MatchString(m.GetName()) {
		err := SecretValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^\\\\w+([.\\\\-]\\\\w+)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SecretMultiError(errors)
	}

	return nil
}

// SecretMultiError is an error wrapping multiple validation errors returned by
// Secret.ValidateAll() if the designated constraints aren't met.
type SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMultiError) AllErrors() []error { return m }

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

var _Secret_Name_Pattern = regexp.MustCompile("^\\w+([.\\-]\\w+)*$")

// Validate checks the field values on SecretVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SecretVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecretVersionMultiError, or
// nil if none found.
func (m *SecretVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSecret() == nil {
		err := SecretVersionValidationError{
			field:  "Secret",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretVersionValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretVersionValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretVersionValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := SecretVersionValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SecretVersionMultiError(errors)
	}

	return nil
}

// SecretVersionMultiError is an error wrapping multiple validation errors
// returned by SecretVersion.ValidateAll() if the designated constraints
// aren't met.
type SecretVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretVersionMultiError) AllErrors() []error { return m }

// SecretVersionValidationError is the validation error returned by
// SecretVersion.Validate if the designated constraints aren't met.
type SecretVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretVersionValidationError) ErrorName() string { return "SecretVersionValidationError" }

// Error satisfies the builtin error interface
func (e SecretVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretVersionValidationError{}
