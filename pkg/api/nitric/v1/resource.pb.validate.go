// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resource/v1/resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PolicyResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyResourceMultiError,
// or nil if none found.
func (m *PolicyResource) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrincipals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyResourceValidationError{
						field:  fmt.Sprintf("Principals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyResourceValidationError{
						field:  fmt.Sprintf("Principals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyResourceValidationError{
					field:  fmt.Sprintf("Principals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyResourceValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyResourceValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyResourceValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PolicyResourceMultiError(errors)
	}

	return nil
}

// PolicyResourceMultiError is an error wrapping multiple validation errors
// returned by PolicyResource.ValidateAll() if the designated constraints
// aren't met.
type PolicyResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyResourceMultiError) AllErrors() []error { return m }

// PolicyResourceValidationError is the validation error returned by
// PolicyResource.Validate if the designated constraints aren't met.
type PolicyResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyResourceValidationError) ErrorName() string { return "PolicyResourceValidationError" }

// Error satisfies the builtin error interface
func (e PolicyResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyResourceValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on ResourceDeclareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDeclareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDeclareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDeclareRequestMultiError, or nil if none found.
func (m *ResourceDeclareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDeclareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceDeclareRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceDeclareRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceDeclareRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Config.(type) {

	case *ResourceDeclareRequest_Policy:

		if all {
			switch v := interface{}(m.GetPolicy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Policy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Policy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDeclareRequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResourceDeclareRequest_Bucket:

		if all {
			switch v := interface{}(m.GetBucket()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Bucket",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Bucket",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBucket()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDeclareRequestValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResourceDeclareRequest_Queue:

		if all {
			switch v := interface{}(m.GetQueue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Queue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Queue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDeclareRequestValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResourceDeclareRequest_Topic:

		if all {
			switch v := interface{}(m.GetTopic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Topic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Topic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTopic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDeclareRequestValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResourceDeclareRequest_Collection:

		if all {
			switch v := interface{}(m.GetCollection()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Collection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Collection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDeclareRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResourceDeclareRequest_Secret:

		if all {
			switch v := interface{}(m.GetSecret()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDeclareRequestValidationError{
						field:  "Secret",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDeclareRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceDeclareRequestMultiError(errors)
	}

	return nil
}

// ResourceDeclareRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceDeclareRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceDeclareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDeclareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDeclareRequestMultiError) AllErrors() []error { return m }

// ResourceDeclareRequestValidationError is the validation error returned by
// ResourceDeclareRequest.Validate if the designated constraints aren't met.
type ResourceDeclareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDeclareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDeclareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDeclareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDeclareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDeclareRequestValidationError) ErrorName() string {
	return "ResourceDeclareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDeclareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDeclareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDeclareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDeclareRequestValidationError{}

// Validate checks the field values on BucketResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BucketResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BucketResourceMultiError,
// or nil if none found.
func (m *BucketResource) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BucketResourceMultiError(errors)
	}

	return nil
}

// BucketResourceMultiError is an error wrapping multiple validation errors
// returned by BucketResource.ValidateAll() if the designated constraints
// aren't met.
type BucketResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketResourceMultiError) AllErrors() []error { return m }

// BucketResourceValidationError is the validation error returned by
// BucketResource.Validate if the designated constraints aren't met.
type BucketResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketResourceValidationError) ErrorName() string { return "BucketResourceValidationError" }

// Error satisfies the builtin error interface
func (e BucketResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketResourceValidationError{}

// Validate checks the field values on QueueResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueueResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueueResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueueResourceMultiError, or
// nil if none found.
func (m *QueueResource) ValidateAll() error {
	return m.validate(true)
}

func (m *QueueResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueueResourceMultiError(errors)
	}

	return nil
}

// QueueResourceMultiError is an error wrapping multiple validation errors
// returned by QueueResource.ValidateAll() if the designated constraints
// aren't met.
type QueueResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueResourceMultiError) AllErrors() []error { return m }

// QueueResourceValidationError is the validation error returned by
// QueueResource.Validate if the designated constraints aren't met.
type QueueResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueResourceValidationError) ErrorName() string { return "QueueResourceValidationError" }

// Error satisfies the builtin error interface
func (e QueueResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueueResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueResourceValidationError{}

// Validate checks the field values on TopicResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopicResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopicResourceMultiError, or
// nil if none found.
func (m *TopicResource) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TopicResourceMultiError(errors)
	}

	return nil
}

// TopicResourceMultiError is an error wrapping multiple validation errors
// returned by TopicResource.ValidateAll() if the designated constraints
// aren't met.
type TopicResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicResourceMultiError) AllErrors() []error { return m }

// TopicResourceValidationError is the validation error returned by
// TopicResource.Validate if the designated constraints aren't met.
type TopicResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicResourceValidationError) ErrorName() string { return "TopicResourceValidationError" }

// Error satisfies the builtin error interface
func (e TopicResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicResourceValidationError{}

// Validate checks the field values on CollectionResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionResourceMultiError, or nil if none found.
func (m *CollectionResource) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CollectionResourceMultiError(errors)
	}

	return nil
}

// CollectionResourceMultiError is an error wrapping multiple validation errors
// returned by CollectionResource.ValidateAll() if the designated constraints
// aren't met.
type CollectionResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionResourceMultiError) AllErrors() []error { return m }

// CollectionResourceValidationError is the validation error returned by
// CollectionResource.Validate if the designated constraints aren't met.
type CollectionResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionResourceValidationError) ErrorName() string {
	return "CollectionResourceValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionResourceValidationError{}

// Validate checks the field values on SecretResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SecretResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecretResourceMultiError,
// or nil if none found.
func (m *SecretResource) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SecretResourceMultiError(errors)
	}

	return nil
}

// SecretResourceMultiError is an error wrapping multiple validation errors
// returned by SecretResource.ValidateAll() if the designated constraints
// aren't met.
type SecretResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretResourceMultiError) AllErrors() []error { return m }

// SecretResourceValidationError is the validation error returned by
// SecretResource.Validate if the designated constraints aren't met.
type SecretResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretResourceValidationError) ErrorName() string { return "SecretResourceValidationError" }

// Error satisfies the builtin error interface
func (e SecretResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretResourceValidationError{}

// Validate checks the field values on ResourceDeclareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDeclareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDeclareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDeclareResponseMultiError, or nil if none found.
func (m *ResourceDeclareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDeclareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResourceDeclareResponseMultiError(errors)
	}

	return nil
}

// ResourceDeclareResponseMultiError is an error wrapping multiple validation
// errors returned by ResourceDeclareResponse.ValidateAll() if the designated
// constraints aren't met.
type ResourceDeclareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDeclareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDeclareResponseMultiError) AllErrors() []error { return m }

// ResourceDeclareResponseValidationError is the validation error returned by
// ResourceDeclareResponse.Validate if the designated constraints aren't met.
type ResourceDeclareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDeclareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDeclareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDeclareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDeclareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDeclareResponseValidationError) ErrorName() string {
	return "ResourceDeclareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDeclareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDeclareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDeclareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDeclareResponseValidationError{}
